cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message("getting chached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
matrix <-makeCacheMatrix(matrix(1:16, nrow=4, ncol=4)
pmatrix$get()
pmatrix$get()
pmatrixget()
matrixget()
matrix()
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix$getInverse()
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4)
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix M- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
}
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message("getting chached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
source("cachematrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, 4, 4))
